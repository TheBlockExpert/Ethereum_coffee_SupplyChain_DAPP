'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events');
var BaseBlockTracker = require('./base');
var createRandomId = require('json-rpc-random-id')();

var SubscribeBlockTracker = function (_BaseBlockTracker) {
  _inherits(SubscribeBlockTracker, _BaseBlockTracker);

  function SubscribeBlockTracker() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SubscribeBlockTracker);

    // parse + validate args
    if (!opts.provider) throw new Error('SubscribeBlockTracker - no provider specified.');
    // BaseBlockTracker constructor

    // config
    var _this = _possibleConstructorReturn(this, (SubscribeBlockTracker.__proto__ || Object.getPrototypeOf(SubscribeBlockTracker)).call(this, opts));

    _this._provider = opts.provider;
    return _this;
  }

  //
  // public
  //

  _createClass(SubscribeBlockTracker, [{
    key: 'checkForLatestBlock',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.getLatestBlock();

              case 2:
                return _context.abrupt('return', _context.sent);

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function checkForLatestBlock() {
        return _ref.apply(this, arguments);
      }

      return checkForLatestBlock;
    }()

    //
    // private
    //

  }, {
    key: '_start',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var blockNumber;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(this._subscriptionId == null)) {
                  _context2.next = 15;
                  break;
                }

                _context2.prev = 1;
                _context2.next = 4;
                return this._call('eth_blockNumber');

              case 4:
                blockNumber = _context2.sent;
                _context2.next = 7;
                return this._call('eth_subscribe', 'newHeads', {});

              case 7:
                this._subscriptionId = _context2.sent;

                this._provider.on('data', this._handleSubData.bind(this));
                this._newPotentialLatest(blockNumber);
                _context2.next = 15;
                break;

              case 12:
                _context2.prev = 12;
                _context2.t0 = _context2['catch'](1);

                this.emit('error', _context2.t0);

              case 15:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[1, 12]]);
      }));

      function _start() {
        return _ref2.apply(this, arguments);
      }

      return _start;
    }()
  }, {
    key: '_end',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(this._subscriptionId != null)) {
                  _context3.next = 10;
                  break;
                }

                _context3.prev = 1;
                _context3.next = 4;
                return this._call('eth_unsubscribe', this._subscriptionId);

              case 4:
                delete this._subscriptionId;
                _context3.next = 10;
                break;

              case 7:
                _context3.prev = 7;
                _context3.t0 = _context3['catch'](1);

                this.emit('error', _context3.t0);

              case 10:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this, [[1, 7]]);
      }));

      function _end() {
        return _ref3.apply(this, arguments);
      }

      return _end;
    }()
  }, {
    key: '_call',
    value: function _call(method) {
      var _this2 = this;

      var params = Array.prototype.slice.call(arguments, 1);
      return new Promise(function (resolve, reject) {
        _this2._provider.sendAsync({
          id: createRandomId(), method: method, params: params, jsonrpc: "2.0"
        }, function (err, res) {
          if (err) reject(err);else resolve(res.result);
        });
      });
    }
  }, {
    key: '_handleSubData',
    value: function _handleSubData(err, data) {
      if (data.method === 'eth_subscription' && data.params.subscription === this._subscriptionId) {
        this._newPotentialLatest(data.params.result.number);
      }
    }
  }]);

  return SubscribeBlockTracker;
}(BaseBlockTracker);

module.exports = SubscribeBlockTracker;