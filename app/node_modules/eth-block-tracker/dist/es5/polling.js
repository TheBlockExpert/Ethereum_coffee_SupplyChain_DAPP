'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var pify = require('pify');
var BaseBlockTracker = require('./base');

var sec = 1000;

var PollingBlockTracker = function (_BaseBlockTracker) {
  _inherits(PollingBlockTracker, _BaseBlockTracker);

  function PollingBlockTracker() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, PollingBlockTracker);

    // parse + validate args
    if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.');
    var pollingInterval = opts.pollingInterval || 20 * sec;
    var retryTimeout = opts.retryTimeout || pollingInterval / 10;
    var keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;
    var setSkipCacheFlag = opts.setSkipCacheFlag || false;
    // BaseBlockTracker constructor

    // config
    var _this = _possibleConstructorReturn(this, (PollingBlockTracker.__proto__ || Object.getPrototypeOf(PollingBlockTracker)).call(this, Object.assign({
      blockResetDuration: pollingInterval
    }, opts)));

    _this._provider = opts.provider;
    _this._pollingInterval = pollingInterval;
    _this._retryTimeout = retryTimeout;
    _this._keepEventLoopActive = keepEventLoopActive;
    _this._setSkipCacheFlag = setSkipCacheFlag;
    return _this;
  }

  //
  // public
  //

  // trigger block polling


  _createClass(PollingBlockTracker, [{
    key: 'checkForLatestBlock',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._updateLatestBlock();

              case 2:
                _context.next = 4;
                return this.getLatestBlock();

              case 4:
                return _context.abrupt('return', _context.sent);

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function checkForLatestBlock() {
        return _ref.apply(this, arguments);
      }

      return checkForLatestBlock;
    }()

    //
    // private
    //

  }, {
    key: '_start',
    value: function _start() {
      var _this2 = this;

      this._performSync().catch(function (err) {
        return _this2.emit('error', err);
      });
    }
  }, {
    key: '_performSync',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var newErr;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this._isRunning) {
                  _context2.next = 16;
                  break;
                }

                _context2.prev = 1;
                _context2.next = 4;
                return this._updateLatestBlock();

              case 4:
                _context2.next = 6;
                return timeout(this._pollingInterval, !this._keepEventLoopActive);

              case 6:
                _context2.next = 14;
                break;

              case 8:
                _context2.prev = 8;
                _context2.t0 = _context2['catch'](1);
                newErr = new Error('PollingBlockTracker - encountered an error while attempting to update latest block:\n' + _context2.t0.stack);

                try {
                  this.emit('error', newErr);
                } catch (emitErr) {
                  console.error(newErr);
                }
                _context2.next = 14;
                return timeout(this._retryTimeout, !this._keepEventLoopActive);

              case 14:
                _context2.next = 0;
                break;

              case 16:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[1, 8]]);
      }));

      function _performSync() {
        return _ref2.apply(this, arguments);
      }

      return _performSync;
    }()
  }, {
    key: '_updateLatestBlock',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        var latestBlock;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._fetchLatestBlock();

              case 2:
                latestBlock = _context3.sent;

                this._newPotentialLatest(latestBlock);

              case 4:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _updateLatestBlock() {
        return _ref3.apply(this, arguments);
      }

      return _updateLatestBlock;
    }()
  }, {
    key: '_fetchLatestBlock',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        var _this3 = this;

        var req, res;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                req = { jsonrpc: "2.0", id: 1, method: 'eth_blockNumber', params: [] };

                if (this._setSkipCacheFlag) req.skipCache = true;
                _context4.next = 4;
                return pify(function (cb) {
                  return _this3._provider.sendAsync(req, cb);
                })();

              case 4:
                res = _context4.sent;

                if (!res.error) {
                  _context4.next = 7;
                  break;
                }

                throw new Error('PollingBlockTracker - encountered error fetching block:\n' + res.error);

              case 7:
                return _context4.abrupt('return', res.result);

              case 8:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function _fetchLatestBlock() {
        return _ref4.apply(this, arguments);
      }

      return _fetchLatestBlock;
    }()
  }]);

  return PollingBlockTracker;
}(BaseBlockTracker);

module.exports = PollingBlockTracker;

function timeout(duration, unref) {
  return new Promise(function (resolve) {
    var timoutRef = setTimeout(resolve, duration);
    // don't keep process open
    if (timoutRef.unref && unref) {
      timoutRef.unref();
    }
  });
}